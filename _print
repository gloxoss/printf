#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}
#include "main.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 1024

/**
 * _printf - produces output according to a format.
 * @format: character string.
 *
 * Return: the number of characters printed (excluding the null byte used to
 * end output to strings).
 */
int _printf(const char *format, ...)
{
        va_list ap;
        char buf[BUF_SIZE];
        int printed = 0, i = 0, j = 0;
        char *s;

        va_start(ap, format);
        while (format && format[i]) {
                if (format[i] == '%') {
                        i++;
                        switch (format[i]) {
                        case 'c':
                                buf[j++] = va_arg(ap, int);
                                break;
                        case 's':
                                s = va_arg(ap, char *);
                                while (s && *s) {
                                        buf[j++] = *s++;
                                        if (j >= BUF_SIZE - 1)
                                                break;
                                }
                                break;
                        case '%':
                                buf[j++] = '%';
                                break;
                        case 'd':
                        case 'i':
                                sprintf(&buf[j], "%d", va_arg(ap, int));
                                j += strlen(&buf[j]);
                                break;
                        case 'b':
                                utoa(va_arg(ap, unsigned int), &buf[j], 2);
                                j += strlen(&buf[j]);
                                break;
                        case 'u':
                                sprintf(&buf[j], "%u", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'o':
                                sprintf(&buf[j], "%o", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'x':
                                sprintf(&buf[j], "%x", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        case 'X':
                                sprintf(&buf[j], "%X", va_arg(ap, unsigned int));
                                j += strlen(&buf[j]);
                                break;
                        default:
                                buf[j++] = '%';
                                buf[j++] = format[i];
                                break;
                        }
                } else {
                        buf[j++] = format[i];
                }
                if (j >= BUF_SIZE - 1) {
                        buf[j] = '\0';
                        printed += j;
                        write(1, buf, j);
                        j = 0;
                }
                i++;
        }
        buf[j] = '\0';
        printed += j;
        write(1, buf, j);
        va_end(ap);
        return printed;
}

